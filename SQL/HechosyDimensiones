--Customer_dm

CREATE OR REPLACE TABLE proyecto6-etl.dataset.customer_dm AS 
SELECT
  customer_id,
  customer_name,
  segment
FROM `proyecto6-etl.dataset.superstore3`
GROUP BY
customer_id,
customer_name,
segment;

--Order_dm

CREATE OR REPLACE TABLE proyecto6-etl.dataset.order_dm AS 
SELECT
  unique_id,
  order_priority,
  city,
  region
FROM `proyecto6-etl.dataset.superstore3`
GROUP BY
unique_id,
  order_priority,
  city,
  region

  --Facts_table

CREATE OR REPLACE TABLE `proyecto6-etl.dataset.sales_fact` AS 
SELECT
  unique_id,
  product_id,
  customer_id,
  order_date1,
  shipping_id,
  market_id,
  sales,
  profit,
  discount,
  quantity,
  shipping_cost
FROM 
  `proyecto6-etl.dataset.superstore3`
GROUP BY 
   unique_id,
  product_id,
  customer_id,
  order_date1,
  shipping_id,
  market_id,
  sales,
  profit,
  discount,
  quantity,
  shipping_cost


  --Shipping_dm

CREATE OR REPLACE TABLE proyecto6-etl.dataset.shipping_dm AS 
SELECT
shipping_ID,
shipping_date1,
ship_mode
FROM `proyecto6-etl.dataset.superstore3`
GROUP BY
shipping_ID,
shipping_date1,
ship_mode

--time_dm

CREATE OR REPLACE TABLE proyecto6-etl.dataset.time_dm AS 
SELECT
  order_date1,
  weeknum,
  order_month,
  order_semester,
  year
FROM `proyecto6-etl.dataset.superstore3`
GROUP BY
order_date1,
  weeknum,
  order_month,
  order_semester,
  year

  --product_dm
CREATE OR REPLACE TABLE proyecto6-etl.dataset.product_dm AS 
SELECT
  product_id,
  product_name,
  category,
  sub_category
FROM `proyecto6-etl.dataset.superstore3`
GROUP BY
product_id,
  product_name,
  category,
  sub_category

  --location_dm

  CREATE OR REPLACE TABLE proyecto6-etl.dataset.location_dm AS 
SELECT
  market_id,
  state,
  country,
  market,
  market2
FROM `proyecto6-etl.dataset.superstore3`
GROUP BY
 market_id,
  state,
  country,
  market,
  market2


  --Validaci√≥n--

 --Order_dm
SELECT 
    sf.unique_id,
    o.order_priority,
    o.city,
    o.region,
    COUNT(*) AS total_orders,
    SUM(sf.sales) AS total_sales  
FROM 
    `proyecto6-etl.dataset.sales_fact` sf
JOIN 
    `proyecto6-etl.dataset.order_dm` o
    ON sf.unique_id = o.unique_id
GROUP BY 
    sf.unique_id, o.order_priority, o.city, o.region
ORDER BY 
    sf.unique_id ASC;



--Customer_dm
SELECT 
    sf.customer_id,
    c.customer_name,
    COUNT(*) AS total_orders,
    SUM(sf.sales) AS total_sales  
FROM 
    `proyecto6-etl.dataset.sales_fact` sf
JOIN 
    `proyecto6-etl.dataset.customer_dm` c
    ON sf.customer_id = c.customer_id
GROUP BY 
    sf.customer_id, c.customer_name
    ORDER BY 
   sf.customer_id ASC;



--Products_dm
SELECT 
    sf.product_id,
    p.product_name,
    SUM(sf.quantity) AS total_quantity_sold,
    SUM(sf.sales) AS total_sales
FROM 
    `proyecto6-etl.dataset.sales_fact` sf
JOIN 
    `proyecto6-etl.dataset.product_dm` p
    ON sf.product_id = p.product_id
GROUP BY 
    sf.product_id, p.product_name
    order by sf.product_id ASC


--time_dm
SELECT 
    sf.order_date1,
    t.weeknum,
    t.order_month,
    t.order_semester,
    COUNT(*) AS total_orders
FROM 
    `proyecto6-etl.dataset.sales_fact` sf
JOIN 
    `proyecto6-etl.dataset.time_dm` t
    ON sf.order_date1 = t.order_date1
GROUP BY 
    sf.order_date1, t.weeknum, t.order_month, t.order_semester;


--shipping_dm
SELECT 
    sf.shipping_id,
    s.ship_mode,
    SUM(sf.shipping_cost) AS total_shipping_cost
FROM 
    `proyecto6-etl.dataset.sales_fact` sf
JOIN 
    `proyecto6-etl.dataset.shipping_dm` s
    ON sf.shipping_id = s.shipping_id
GROUP BY 
    sf.shipping_id, s.ship_mode;

--location_dm
SELECT 
    sf.market_id,
    loc.country,
    loc.state,
    loc.market,
    loc.market2,
    COUNT(*) AS total_sales
FROM 
    `proyecto6-etl.dataset.sales_fact` sf
JOIN 
    `proyecto6-etl.dataset.location_dm` loc
    ON sf.market_id = loc.market_id
GROUP BY 
    sf.market_id, loc.country, loc.state, loc.market, loc.market2
    ORDER BY sf.market_id ASC


--SALES_FACTS
SELECT 
    COUNT(DISTINCT unique_id) AS total_orders,
    SUM(sales) AS total_sales,
    SUM(profit) AS total_profit,
    AVG(discount) AS average_discount,
    SUM(quantity) AS total_quantity
FROM 
    `proyecto6-etl.dataset.sales_fact`;
